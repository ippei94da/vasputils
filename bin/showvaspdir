#! /usr/bin/env ruby
# coding: utf-8

# Show state of vasp geometry optimization calculations.

#require "vasputils/calcseries.rb"
require "rubygems"
gem "vasputils"
require "vasputils.rb"

require "pp"
require "optparse"

## option analysis
OPTIONS = {}
op = OptionParser.new
OPTIONS[:show_state] = []
op.on("-f", "--finished"  , "Show finished dir. -a is ignored."){OPTIONS[:show_state] << :finished}
op.on("-y", "--yet"       , "Show yet dir."                    ){OPTIONS[:show_state] << :yet}
op.on("-t", "--terminated", "Show terminated dir."             ){OPTIONS[:show_state] << :terminated}
op.on("-s", "--started"   , "Show sarted dir."                 ){OPTIONS[:show_state] << :started}
op.on("-l", "--files-with-matches", "Show dir name only."      ){OPTIONS[:filename  ] = true}

op.on("-s", "--state"       , "Show STATE."    ){OPTIONS[:state    ] = true}
op.on("-e", "--toten"       , "Show TOTEN."    ){OPTIONS[:toten    ] = true}
op.on("-i", "--ionic-steps" , "Show ionic steps as I_S."    ){OPTIONS[:ionic_steps  ] = true}
op.on("-L", "--last-update" , "Show LAST-UPDATE."  ){OPTIONS[:last_update  ] = true}
op.on("-k", "--kpoints" , "Show KPOINTS."  ){OPTIONS[:kpoints  ] = true}
op.on("-c", "--encut" , "Show ENCUT."  ){OPTIONS[:encut    ] = true}
op.parse!(ARGV)

## if all select are not set, all are set.
if OPTIONS[:show_state].size == 0
    OPTIONS[:all]       = true
end

dirs = ARGV
dirs = Dir.glob("*").sort if ARGV.empty?

def show(hash)


    klass_name, state, toten, i_step, e_step, time, dir
    if (OPTIONS[:all]) || (OPTIONS[:show_state].include? state)
        unless OPTIONS[:filename]
            printf "%-11s ", klass_name
            printf "%-10s ", state
            printf "%17s " , toten
            printf "%3s "    , i_step
            printf "(%3s) ", e_step
            printf "%15s ", time
        end
        print    dir
        puts
    end
end

#I_S is ionic steps
#E_S is electronic steps
unless OPTIONS[:filename]
        show("TYPE", "STATE", "TOTEN", "I_S", "E_S", "LAST_UPDATE", "DIR")
        #puts "======================================================================"
end

dirs.each do |dir|
    next unless File.directory? dir

    begin
        klass_name = "VaspDir"
        calc = VaspUtils::VaspDir.new(dir)
        state = calc.state
        begin
            outcar = calc.outcar
            toten    = sprintf("%17.6f", outcar[:totens][-1].to_f)
            i_step = outcar[:ionic_steps]
            e_step = outcar[:electronic_steps]
            #time = calc.latest_modified_time.to_s
            time = calc.latest_modified_time.strftime("%Y%m%d-%H%M%S")
        rescue
            toten    = i_step = e_step = time = ""
        end

    rescue VaspUtils::VaspDir::InitializeError
        klass_name = "-------"
        state = toten = i_step = e_step = "---"
    end

    show(klass_name, state, toten, i_step, e_step, time, dir)
end

