#! /usr/bin/env ruby
# coding: utf-8

USAGE = <<HERE
  USAGE: qsubvasp [-c CLUSTER_NAME] [-n num] calc_dir

   [-n INDICATOR]
     Integer can be uused as INDICATOR.
     If INDICATOR cannot be evaluated as positive integer,
     try to find tue hostname of localhost and
     key of
     the INDICATOR in ~/.clustersetting
     Default value is 1.

   calc_dir is a vasp directory as usual,
   when with -g option, VaspGeometryOptimizer directory.
HERE

#require "optparse"
require "pp"
require "yaml"
require "optparse"

require "rubygems"
require "comana"

gem "vasputils"
require "vasputils.rb"

OPTIONS = {}

op = OptionParser.new
op.on("-c cluster", "--cluster=name" , "Cluster name."){|v| OPTIONS[:cluster] = v }
op.on("-n number", "--nodes=num", "Indicate node number, or key in ~/.clustersetting."){|v|
  OPTIONS[:nodes] = v
}
op.on("-g", "--geom-opt", "Geometry optimization."){ OPTIONS["geomopt"] = true}
op.parse!(ARGV)

def condition_check(opts)
  # Condition Check
  mi = Comana::ClusterSetting.load_file("#{ENV["HOME"]}/.clustersetting")
  conds = {}

  # cluster
  #name = opts[:cluster]
  #if name
  #  conds[:cluster] = name
  #else
  #  puts "-c CLUSTER_NAME is necessary."
  #  exit
  #end
  conds[:cluster] = opts[:cluster]

  # target and command
  unless ARGV.size == 1
    puts "Indicate only one directory for vasp. Argument: #{ARGV}"
    exit
  end
  if opts["geomopt"]
    begin
      conds["target"] = VaspUtils::VaspGeometryOptimizer.new(File.expand_path(ARGV[0]))
      conds["command"] = "runvasp -g"
    rescue VaspUtils::VaspGeometryOptimizer::NoVaspDirError
      puts "Seem not to be a directory for VaspGeometryOptimizer #{ARGV}"
      exit
    end
  else
    begin
      conds["target"] = VaspUtils::VaspDir.new(File.expand_path(ARGV[0]))
      conds["command"] = "runvasp"
    rescue VaspUtils::VaspDir::InitializeError
      puts "Seem not to be a directory for VaspDir #{ARGV}"
      exit
    end
  end

  # nodes
  #str = opts[:nodes]
  #num = str.to_i
  #if num > 0
  #  conds[:nodes] = num
  #else
  #  if mi.get_info(name).has_key?(str)
  #    conds[:nodes] = mi.get_info(name)[str]
  #  else
  #    puts "-n argument must be a positive integer or key in ~/.clustersetting."
  #    exit
  #  end
  #end
  if opts[:nodes]
    if opts[:cluster]
      conds[:nodes] = opts[:nodes].to_i
    else
      puts "-n argument can be set only with -c option."
      puts USAGE
      exit
    end
  end
  conds
end
opts = condition_check(OPTIONS)
#pp opts; exit

print ARGV[0] + ", "
qs = Comana::QueueSubmitter.new(opts)

begin
  qs.start
  puts "Submitted. Exit."
  exit
rescue Comana::QueueSubmitter::AlreadyStartedError
  puts "Already started. Exit."
  exit
#rescue Comana::QueueSubmitter::PrepareNextError
#  puts "Must not happen."
#  exit
end
