#! /usr/bin/env ruby
# coding: utf-8

require "optparse"
require "fileutils"
#require "rubygems"
#gem "vasputils"
require "vasputils"

## option analysis
OPTIONS = {}
op = OptionParser.new
op.on("-f"    , "--force"    , "Force to remove finished calc."){ OPTIONS[:force] = true}
op.on("-g"    , "--geomopt"  , "Indicate VaspGeometryOptimizer, not VaspDir."){ OPTIONS[:geomopt] = true}
op.parse!(ARGV)

USAGE = "Execute 'redovasp', and clean output files from vasp in the current directory."
unless ARGV.size == 0
  puts USAGE
  exit
end

tgt = ENV['PWD']

def redo_vasp_dir(tgt)
  # check directory
  begin
    vd = VaspUtils::VaspDir.new(tgt)
  rescue VaspUtils::VaspDir.InitializeError
    puts "Not VaspDir: #{tgt}"
    exit
  end

  # Delete
  if OPTIONS[:force] || (! vd.finished?)
    [
      "CHG", "CHGCAR", "CONTCAR", "DOSCAR", "EIGENVAL", "ELFCAR",
      "IBZKPT",
      "LOCPOT", "OSZICAR", "OUTCAR", "PCDAT", "WAVECAR",
      "XDATCAR", "lock_vaspdir", "stdout", "vasprun.xml",
      #"INCAR", #"KPOINTS", #"POSCAR", #"POTCAR",
    ].each do |file|
      path = tgt + "/" + file
      puts_and_delete path if File.exist? path
    end
  else
    puts "Finished calc." #: #{tgt}"
    exit
  end
end

def redo_vasp_geom_opt(tgt)
  vgo = VaspUtils::VaspGeometryOptimizer.new(tgt)

  # Delete
  if OPTIONS[:force] || (! vgo.finished?)
    # stdout via torque
    Dir.glob( ["*.o*", "*.sh", "*.log", "lock_*" ] ) .each do |file|
      puts_and_delete file
    end
    redo_vasp_dir vgo.latest_dir.dir
  else
    puts "Finished calc. " #{tgt}"
    exit
  end
end

def puts_and_delete(file)
  puts "Deleting: #{file}"
  FileUtils.remove_entry_secure file
end

if OPTIONS[:geomopt]
  redo_vasp_geom_opt(tgt)
else
  redo_vasp_dir(tgt)
end
