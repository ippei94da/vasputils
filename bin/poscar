#! /usr/bin/env ruby

require "rubygems"
require "vasputils"

#gem "crystalcell"
#require "crystalcell/latticeaxes.rb"
#require "crystalcell/cell.rb"

def lattice_constants(args)
  puts "      a,       b,       c,  alpha,   beta,  gamma,   volume, file"
  ARGV.each do |file|
    axes = VaspUtils::Poscar.load_file(file).axes
    latticeconstants = CrystalCell::LatticeAxes.axes_to_lc(axes)
    printf("%7.4f, %7.4f, %7.4f, %6.2f, %6.2f, %6.2f, ",
      *(latticeconstants))
    printf("%8.3f, ", CrystalCell::Cell.new(axes).calc_volume) # show volume
    puts file
  end
end

def distance(args)
  if args.size > 3
    puts "USAGE: poscar d[istance] poscar [id1] [id2]"
    puts "Note: id count from 1"
    exit
  end

  poscar = VaspUtils::Poscar.load_file(args.shift)
  id = args.shift
  atom1s = [id.to_i]
  atom1s = 1..poscar.positions.size if id == nil

  id = args.shift
  atom2s = [id.to_i]
  atom2s = 1..poscar.positions.size if id == nil

  printf("atom1, atom2, %8s, %8s\n", "distance", "periodic_distance")
  atom1s.each do |atom1|
    atom2s.each do |atom2|
      index1 = atom1 - 1
      index2 = atom2 - 1

      cell = poscar.to_cell
      positions = cell.positions
      d =  cell.distance(positions[index1], positions[index2]) #not periodic

      pcell = cell.to_pcell
      pd = pcell.nearest_distance(positions[index1], positions[index2]) #not periodic
      printf("%5i, %5i, %8.5f, %8.5f\n", atom1, atom2 , d, pd)

      #pp cell.distance
    end
  end
end

def substitute(args)
  unless args.size == 3
    puts "USAGE: poscar s[ubstitute] poscar elem1 elem2"
    puts "  E.g., poscar substitute dir/poscar Ti Ni"
    exit
  end

  poscar, elem1, elem2 = * args
  poscar = VaspUtils::Poscar.load_file(poscar)
  poscar.substitute(elem1, elem2).dump($stdout)
end

command = ARGV.shift 

USAGE =<<HERE
USAGE: poscar command [arguments]" 
  command:
    d[istance]
    l[atticeconstants]
    s[ubstitute]
HERE

if command == nil
  puts USAGE
  exit
end

case command
when /^l/ #latticeconstants
  lattice_constants(ARGV)
when /^d/ #distance
  distance(ARGV)
when /^s/ #substitute
  substitute(ARGV)
end

