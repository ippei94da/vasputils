#! /usr/bin/env ruby
#
# 構造最適化計算の vasprun.xml から ionic step ごとの POSCAR を作る。
# selective dynamics は面倒なので受け継ぐ機構を付けていない。

require "rubygems"
require "vasputils"
require "optparse"
require "pp"

## option analysis
OPTIONS = {}
op = OptionParser.new
#op.banner = [
#    "Usage: #{File.basename("#{__FILE__}")}",
#].join("\n")
op.on("-x"    , "--xdatcar"    , "Use XDATCAR in spite of vasprun.xml"){ OPTIONS[:xdatcar] = true}
op.parse!(ARGV)

if OPTIONS[:xdatcar]
  xdatcar = VaspUtils::Xdatcar.load_file("./XDATCAR")

  positions_list = xdatcar.steps_positions
  elements = xdatcar.elements
  nums_elements = xdatcar.nums_elements

  bases = Array.new( positions_list.size).fill(xdatcar.axes)
  
  #bases = xdatcar.axes * positions_list.size
else
  xml = VaspUtils::VasprunXml.load_file("./vasprun.xml")

  bases =  xml.bases
  positions_list = xml.positions_list
  elements = xml.elements
  nums_elements = xml.nums_elements
end

#p bases
#p elements
#p nums_elements
#exit

num_iteration = positions_list.size
width = num_iteration.to_s.size

bases.size.times do |i|
  prefix = sprintf("%0#{width}d", i +1)
  File.open(prefix + ".vasp", "w") do |io|


    poscar = VaspUtils::Poscar.new(
      hash = {
        :comment            => "Generated by geomoptposcar, #{prefix}/#{num_iteration}",
        :scale              => 1.0,
        :axes               => bases[i],
        :elements           => elements,
        :nums_elements      => nums_elements,
        :selective_dynamics => false,
        :direct             => 'direct',
        :positions          => positions_list[i],
      }
    )
    poscar.dump(io)
  end
end

