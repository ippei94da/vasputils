#! /usr/bin/env ruby
# coding: utf-8

require "vasputils"
require 'thor'

#data = {}
#if ARGV[0] =~ /^m/i
#  data[:type] = :monkhorst
#elsif ARGV[0] =~ /^g/i
#  data[:type] = :gamma_center
#else
#  puts "Unknown type. Exit."
#  exit
#end
#
#data[:mesh] = ARGV[1..3].map do |i|
#  unless i.to_i 
#    puts "Mesh divisions must be larger than 0. Exit"
#    exit
#  end
#  i.to_i
#end
#
#data[:shift] = [0.0, 0.0, 0.0]
#VaspUtils::Kpoints.dump(data, STDOUT)


class KpointsCommand < Thor
  desc "generate [option] settings", "Generate KPOINTS"
  long_desc " Generate KPOINTS file. \n" +
  "E.g., kpoints generate --mesh 2 3 4 --shift 0.1 0.2 0.3 --monkhorst"

  option :mesh, banner: '[=array]', desc: 'Indicate mesh', type: :array
  option :shift, banner: '[=array]', desc: 'Indicate shift', type: :array
  option :monkhorst, desc: 'Use Monkhorst packing'
  #option :load, banner: '[=INCAR]', desc: 'Load INCAR'
  #def generate(*args)
  def generate
    #if options[:load]
    #  kpoints = VaspUtils::Kpoints.load_file(options[:load])
    #end

    if options[:mesh]
      mesh = options[:mesh]
      unless mesh.size == 3
        puts "Three integers must be indicated as argument of --mesh option. Exit."
        exit
      end
      mesh.map!{|i| i.to_i}
    end

    if options[:shift]
      shift = options[:shift]
      unless shift.size == 3
        puts "Three integers must be indicated as argument of --shift option. Exit."
        exit
      end
      shift.map!{|i| i.to_f}
    end

    type = :monkhorst if options[:monkhorst]

    mesh  ||= [1,1,1]
    shift ||= [0.0, 0.0, 0.0]
    type  ||= :gamma_center

    hash = {
      :comment => 'Generated by vasputils/bin/kpoints.',
      :points  => nil,
      :scheme  => :automatic,
      :mesh    => mesh ,
      :shift   => shift,
      :type    => type 
    }

    kpoints = VaspUtils::Kpoints.new(hash)
    kpoints.dump(STDOUT)
  end
end

KpointsCommand.start(ARGV)

