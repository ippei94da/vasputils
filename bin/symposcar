#!/usr/bin/env ruby
# Original version, Copyright (C) 2008 Atsushi Togo, togo.atsushi@gmail.com
# Little modified by Ippei Kishida. [2012-06-12]
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Fifth Floor, Boston, MA 02110-1301, USA, or see
# http://www.gnu.org/copyleft/gpl.html
#
# Usage: symPoscar.rb [OPTION] [structure]
# OPTION: -s, --symprec= : Symmetry check precision

require 'pp'
require 'optparse'
require 'getspg.so'
#require '/home/ippei/opt/spglib-1.3.1/test/getspg.so'
include Getspg

require 'rubygems'
#gem 'vasputils'
#require 'vasputils/poscar'
require 'vasputils'


symprec = 1e-5
angle_tolerance = -1.0
nonewline = false
pos_shift = [0,0,0]
shift_string = false
is_long_output = false
is_operations = false
is_dataset = false
opt = OptionParser.new
opt.on('-s', '--symprec=', 'Symmetry check precision') {|tmp| symprec = tmp.to_f}
opt.on('-a', '--angle_tolerance=', 'Symmetry check precision for angle between lattice vectors in degrees') {|tmp| angle_tolerance = tmp.to_f}
opt.on('-d', '--shift=', 'uniform shift of internal atomic positions') {|shift_string|}
opt.on('-n', '--nonewline', 'Do not output the trailing newline') {nonewline = true}
opt.on('-l', '--long', 'Long output') {is_long_output = true}
opt.on('-o', '--operations', 'Symmetry operations') {is_operations = true}
opt.on('-d', '--dataset', 'Dataset') {is_dataset = true}
opt.parse!(ARGV)

unless ARGV.size == 1
  puts "Indicate only 1 POSCAR or CONTCAR. Exit."
  exit
end

if shift_string
  pos_shift = []
  shift_string.split.each {|val| pos_shift << val.to_f }
end

cell = VaspUtils::Poscar.load_file(ARGV.shift)
lattice = cell.axes.to_a.transpose

names = (cell.atoms.collect {|atom| atom.name}).uniq
position = []
types = []
names.each_with_index do |name, i|
  cell.atoms.each do |atom|
    if atom.name == name
      apos = atom.position
      position << [ apos[0]+pos_shift[0],
                    apos[1]+pos_shift[1],
                    apos[2]+pos_shift[2] ]
      types << i+1
    end
  end
end

if is_long_output
  spg, brv_lattice, brv_positions, brv_types, spgnum = 
    refine_cell(types.size, lattice, position, types, symprec, angle_tolerance)
end

#pp lattice
#types = [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]

spgnum, spg, hall_symbol, t_mat, o_shift,
rotations, translations, wyckoffs = get_dataset( lattice,
                                                 position,
                                                 types,
                                                 symprec,
                                                 angle_tolerance)
#pp lattice.size
#pp position
p types.size
#pp symprec
#pp angle_tolerance
#pp rotations
exit
#rotations = [[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]],
#  [[0.0, -1.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, 1.0]],
#  [[-1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, 1.0]],
#  [[0.0, 1.0, 0.0], [-1.0, 0.0, 0.0], [0.0, 0.0, 1.0]],
#  [[1.0, 0.0, 0.0], [0.0, -1.0, 0.0], [0.0, 0.0, -1.0]],
#  [[0.0, -1.0, 0.0], [-1.0, 0.0, 0.0], [0.0, 0.0, -1.0]],
#  [[-1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, -1.0]],
#  [[0.0, 1.0, 0.0], [1.0, 0.0, 0.0], [0.0, 0.0, -1.0]],
#  [[0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0]],
#  [[0.0, 0.0, 1.0], [0.0, -1.0, 0.0], [1.0, 0.0, 0.0]],
#  [[0.0, 0.0, 1.0], [-1.0, 0.0, 0.0], [0.0, -1.0, 0.0]],
#  [[0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [-1.0, 0.0, 0.0]],
#  [[0.0, 0.0, -1.0], [1.0, 0.0, 0.0], [0.0, -1.0, 0.0]],
#  [[0.0, 0.0, -1.0], [0.0, -1.0, 0.0], [-1.0, 0.0, 0.0]],
#  [[0.0, 0.0, -1.0], [-1.0, 0.0, 0.0], [0.0, 1.0, 0.0]],
#  [[0.0, 0.0, -1.0], [0.0, 1.0, 0.0], [1.0, 0.0, 0.0]],
#  [[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0]],
#  [[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, -1.0, 0.0]],
#  [[0.0, -1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 0.0, 0.0]],
#  [[-1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
#  [[0.0, -1.0, 0.0], [0.0, 0.0, -1.0], [1.0, 0.0, 0.0]],
#  [[-1.0, 0.0, 0.0], [0.0, 0.0, -1.0], [0.0, -1.0, 0.0]],
#  [[0.0, 1.0, 0.0], [0.0, 0.0, -1.0], [-1.0, 0.0, 0.0]],
#  [[1.0, 0.0, 0.0], [0.0, 0.0, -1.0], [0.0, 1.0, 0.0]]]

ptg_symbol, ptg_num, trans_mat = getptg(rotations)
#exit

if spgnum > 0
  if nonewline
    print "# #{spg.strip} (#{spgnum})"
  else
    puts "# #{spg.strip} (#{spgnum})"

    if is_long_output
      puts "----------- original -----------"
      lattice.each do |vec|
        printf("%10.5f %10.5f %10.5f\n", vec[0], vec[1], vec[2]);
      end

      puts "------------ final -------------"
      brv_lattice.each do |vec|
        printf("%10.5f %10.5f %10.5f\n", vec[0], vec[1], vec[2]);
      end

      brv_types.size.times do |i|
        printf("%d: %d  %10.5f %10.5f %10.5f\n", i+1, brv_types[i], 
               brv_positions[i][0], brv_positions[i][1], brv_positions[i][2]);
      end
    end

    if is_dataset
      # puts "------ transformation matrix -----"
      # t_mat.each do |row|
      #   printf("%10.5f %10.5f %10.5f\n", row[0], row[1], row[2]);
      # end

      # puts "---------- origin shift ----------"
      # printf("%10.5f %10.5f %10.5f\n", o_shift[0], o_shift[1], o_shift[2]);
      
      puts "--------- Wyckoff position ----------"
      wl = "abcdefghijklmnopqrstuvwxyz"
      wyckoffs.each_with_index do |w, i|
        pos = []
        3.times do |j|
          pos.push( position[i][j] - position[i][j].floor )
        end
        printf("%4d %2s  %s %8.5f %8.5f %8.5f\n",
               i+1, cell.atoms[i].name, wl[w,1], pos[0], pos[1], pos[2])
      end
    end

  end
end

#pp get_operations( types.size, lattice, position, types, symprec )

if is_operations
  rotations, translations = get_operations( types.size,
                                            lattice,
                                            position,
                                            types,
                                            symprec,
                                            angle_tolerance)
end


if is_operations or is_dataset
  rotations.size.times do |i|
    puts "- # ----#{i+1}----"
    puts "  rotation:"
    rotations[i].each do |row|
      printf("    - [%2d, %2d, %2d]\n", row[0], row[1], row[2])
    end
    printf("  translation: [%f, %f, %f]\n",
      translations[i][0], translations[i][1], translations[i][2])
  end
end

