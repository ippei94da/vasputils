require "comana"
require "fileutils"
require "optparse"
require "pp"
require "rubygems"
require "vasputils"


def show_usage
  puts <<-HERE
USAGE
  vaspebm command [option] [path]

E.g.,
  vaspebm interpolate [option] contcar0 contcar1

  HERE
end
# vaspebm show  [option] [path] # Show state of vasp geometry optimization.
# vaspebm latest         [path] # Show latest vaspdir.
# vaspebm run   [option] [path] # Run vasp geometry optimization
# vaspebm next  [option] [path] # Generate next step of ebm.
# vaspebm initialize  [option] [path] # Initialize ebm.
# vaspebm reincarnate [option] [path] # Generate new ebm from final structure.

command = ARGV.shift

case command
when interpolate
    VaspUtils::VaspElasticBand.interpolate(ARGV)
#when "show"
#    VaspUtils::VaspElasticBand.show_inspect(ARGV)
#when "latest"
#    VaspUtils::VaspElasticBand.show_latest(ARGV)
#when "run"
#    VaspUtils::VaspElasticBand.run(ARGV)
##when "reset"
##    VaspUtils::VaspElasticBand.reset(ARGV)
#when "next"
#    VaspUtils::VaspElasticBand.next(ARGV)
#when "initialize"
#    VaspUtils::VaspElasticBand.reset_initialize(ARGV)
#when "reincarnate"
#    VaspUtils::VaspElasticBand.reincarnate(ARGV)
#when "--help"
#    show_usage
else
    puts "Unknown command: #{command}"
    show_usage
end




#! /usr/bin/env ruby
# coding: utf-8

require "optparse"
require "pp"

## option analysis
OPTIONS = {}
op = OptionParser.new
op.banner = [
    "Usage: #{File.basename("#{__FILE__}")}",
].join("\n")
op.on("-a"    , "--aho"    , "descriptionA"){    OPTIONS[:aho] = true}
op.on("-b val", "--bak=val", "descriptionB"){|v| OPTIONS[:bak] = v}
op.parse!(ARGV)


poscar0 = ARGV.shift
poscar1 = ARGV.shift

#! /usr/bin/env ruby
# coding: utf-8

require "pp"

if ((@ARGV < 2) || (3 < @ARGV)){
  die "USAGE: interpolatePOSCAR2 CONTCAR1 CONTCAR2 [num_images]\n";
}

($poscar1Name, $poscar2Name, $images) = @ARGV;
if (! $images) {
  $images = 1;         # INCAR:IMAGES のデフォルト値
}

## 2つの入力ファイルからディレクトリ名を切り出す
$poscar1Dir = $poscar1Name;
$poscar1Dir =~ s|/[^/]+||;

$poscar2Dir = $poscar2Name;
$poscar2Dir =~ s|/[^/]+||;


## EBM 初期ファイルを生成するディレクトリ
$targetDir = "EBM--"."$poscar1Dir"."--"."$poscar2Dir";
if (-e "$targetDir") {
  die "$targetDir already exist.\n";
} else {
  $command = "mkdir $targetDir";
  system("$command");
  print "$command\n";
}



