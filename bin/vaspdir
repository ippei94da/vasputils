#! /usr/bin/env ruby
# coding: utf-8

# Manipulate VaspDir from command line.  

require "vasputils"
require 'thor'

INSPECT_DEFAULT_ITEMS = [ :klass_name, :state, :toten, :dir, ]
INSPECT_ALL_ITEMS = [ :kpoints, :encut, :i_step, :e_step, :time, ] + INSPECT_DEFAULT_ITEMS

# for printf option. minus value indicate left shifted printing.
INSPECT_WIDTH = {
  :dir         => "-20",
  :e_step      => "3",
  :i_step      => "3",
  :klass_name  => "11",
  :kpoints     => "8",
  #:ka          => "2",
  #:kb          => "2",
  #:kc          => "2",
  :encut       => "6",
  :state       => "10",
  :time        => "15",
  :toten       => "17",
}


def show_items(hash, tgt_properties)
  items = tgt_properties.map do |item|
    val = sprintf("%#{INSPECT_WIDTH[item]}s", hash[item])
    val
  end
  separator = " "

  puts items.join(separator)
end

def form_time(second)
  second = second.to_i
  result = ""
  result = sprintf("%02d", second % 60)

  minute = second / 60
  if 0 < minute
    result = sprintf("%02d:#{result}", minute % 60)
  end

  hour = minute / 60
  if 0 < hour
    result = sprintf("%02d:#{result}", hour % 24)
  end

  day = hour / 24
  if 0 < day
    result = sprintf("%dd #{result}", day)
  end

  return result
end


### Command template
class VaspdirCommand < Thor
  desc 'show [options] [dirs]', "show information"
  option "finished"          , type: :boolean, desc: "Show about finished dir."       #"-f",
  option "yet"               , type: :boolean, desc: "Show about yet dir."            #"-y",
  option "terminated"        , type: :boolean, desc: "Show about terminated dir."     #"-t",
  option "started"           , type: :boolean, desc: "Show about sarted dir."         #"-s",
  option "dirs_with_matches" , type: :boolean, desc: "Show dir name only."      #"-l",
  option "all_items"         , type: :boolean, desc: "Show all items."          #"-a",
  option "state"             , type: :boolean, desc: "Show STATE."              #"-S",
  option "toten"             , type: :boolean, desc: "Show TOTEN."              #"-e",
  option "ionic_steps"       , type: :boolean, desc: "Show ionic steps as I_S." #"-i",
  option "last_update"       , type: :boolean, desc: "Show LAST-UPDATE."        #"-L",
  option "encut"             , type: :boolean, desc: "Show ENCUT."              #"-c",
  option "kpoints"           , type: :boolean, desc: "Show KPOINTS."            #"-k",
  def show(* args)
    tgt_properties = []
    show_dir_states = []

    show_dir_states << :finished   if options[:finished]
    show_dir_states << :yet        if options[:yet]
    show_dir_states << :terminated if options[:terminated]
    show_dir_states << :started    if options[:started]
    tgt_properties << :state       if options[:state]
    tgt_properties << :toten       if options[:toten]
    tgt_properties << :ionic_steps if options[:ionic_steps]
    tgt_properties << :last_update if options[:last_update]
    tgt_properties << :encut       if options[:encut]
    tgt_properties << :kpoints     if options[:kpoints]

    dirs = args
    dirs = ["."] if args.empty?

    if options[:all_items]
      tgt_properties = INSPECT_ALL_ITEMS
    elsif options[:dirnameonly]
      tgt_properties = [:dir]
    elsif tgt_properties == nil || tgt_properties.empty?
      tgt_properties = INSPECT_DEFAULT_ITEMS
    else
      tgt_properties = tgt_properties.push :dir
    end

    unless options[:dirnameonly]
      # show title of items.
      results = {
        :klass_name => "TYPE",
        :kpoints    => "KPOINTS",
        :encut      => "ENCUT",
        :state      => "STATE",
        :toten      => "TOTEN",
        :i_step     => "I_S", #I_S is ionic steps
        :e_step     => "E_S", #E_S is electronic steps
        :time       => "LAST_UPDATE_AGO",
        :dir        => "DIR"
      }
      show_items(results, tgt_properties)
    end

    dirs.each do |dir|
      next unless File.directory? dir
      begin
        klass_name = "VaspDir"
        calc = VaspUtils::VaspDir.new(dir)
        state = calc.state
        begin
          outcar = calc.outcar
          toten  = sprintf("%9.6f", outcar[:totens][-1].to_f)
          i_step = outcar[:ionic_steps]
          e_step = outcar[:electronic_steps]
          time = form_time(Time.now - calc.latest_modified_time)
          kp = calc.kpoints

          if kp.scheme == :automatic
            k_str = kp.mesh.join("x")
          else
            k_str = kp.points.size.to_s
          end

          encut = calc.incar["ENCUT"]
        rescue
          toten = i_step = e_step = time = k_str = encut = ""
        end

      rescue VaspUtils::VaspDir::InitializeError
        klass_name = "-------"
      end
      results = {
        :klass_name => klass_name,
        :kpoints    => k_str,
        :encut      => encut,
        :state      => state,
        :toten      => toten,
        :i_step     => i_step,
        :e_step     => e_step,
        :time       => time,
        :dir        => dir,
      }

      if show_dir_states.empty?
        show_items(results, tgt_properties)
      else
        if show_dir_states.include? results[:state]
          show_items(results, tgt_properties)
        end
      end
    end
  end

  desc 'execute [dirs]', "Execute vasp"
  def execute(* args)
    tgts = args
    tgts = [ENV['PWD']] if tgts.empty?

    tgts.each do |dir|
      begin
        calc_dir = VaspUtils::VaspDir.new(dir)
        calc_dir.start
      rescue VaspUtils::VaspDir::InitializeError
        puts "Not VaspDir: #{dir}"
        exit
      rescue Comana::ComputationManager::AlreadyStartedError
        puts "Already started. Exit."
        exit
      end
    end
  end

  desc 'qsub [options] [dirs]', "Submit queue to grid engine. Empty 'dirs' in argument indicates current directory.' "
  option :q_name, desc: "Queue name for '#$ -q'"
  option :pe_name, desc: "Parallel environment name for '#$ -pe'"
  option :ppn, desc: "Process per node, 2nd argument for'#$ -pe'"
  option :ld_library_path, desc: "Environmental variable 'LD_LIBRARY_PATH'"
  option :command, desc: "Command"
  option :load_group, desc: "Load setting from group in setting file."
  #option :auto, desc: "Select low load group and automatic setting."
  #~/.clustersetting."
  def qsub(* args)
    tgts = args
    tgts = [ENV['PWD']] if tgts.empty?

    q_name          = options[:q_name]           
    pe_name         = options[:pe_name]          
    ppn             = options[:ppn]          
    ld_library_path = options[:ld_library_path]  
    #command         = options[:command]         
    command = options[:command] || "#{`which #{__FILE__}`.chomp} execute"
    if options[:load_group]
      settings = Comana::ClusterSetting.load_file
      gs = settings.groups[options[:load_group]]
      q_name          ||= gs['queue']
      pe_name         ||= gs['pe']         
      ppn             ||= gs['ppn']         
      ld_library_path ||= gs['ld_library_path'] 
      #pp gs
    end

    #pp q_name          
    #pp pe_name         
    #pp ld_library_path 
    #pp command 
    #exit


    tgts.each do |dir|
      begin
        calc_dir = VaspUtils::VaspDir.new(dir)
        calc_dir.queue_submit(
          q_name:           q_name,
          pe_name:          pe_name,
          ppn:              ppn,
          ld_library_path:  ld_library_path,
          command:          command
        )
      rescue VaspUtils::VaspDir::InitializeError
        puts "Not VaspDir: #{dir}"
        exit
      rescue Comana::ComputationManager::AlreadySubmittedError
        puts "Already started. Exit."
        exit
      end
    end
  end




  #def submit
  #  VaspUtils::VaspDir.submit(args)
  #end

  desc 'clean [dirs]', "Clean up output files of VASP"
  def clean(* args)
    targets = args
    targets = [ENV['PWD']] if targets.empty?
    targets.each do |target_dir|
      puts "Directory: #{target_dir}"

      # Check target_dir is VaspDir?
      begin
        vd = VaspUtils::VaspDir.new(target_dir)
      rescue VaspUtils::VaspDir::InitializeError
        puts "  Do nothing due to not VaspDir."
        next
      end
      vd.reset_clean
    end
  end

  desc 'init [dirs]', "Clean up all files except for POSCAR, POTCAR, KOINTS, INCAR"
  def init(* args)
    targets = args
    targets = [ENV['PWD']] if targets.empty?
    targets.each do |target_dir|
      puts "Directory: #{target_dir}"

      # Check target_dir is VaspDir?
      begin
        vd = VaspUtils::VaspDir.new(target_dir)
      rescue VaspUtils::VaspDir::InitializeError
        puts "  Do nothing due to not VaspDir."
        next
      end
      vd.reset_initialize
    end
  end
#
#  ##def poscar
#  ##    #VaspUtils::VaspDir.show_inspect(args)
#  ##    #pp VaspUtils::VaspDir.poscar(args)
#  ##end
end

VaspdirCommand.start(ARGV)
