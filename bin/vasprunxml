#! /usr/bin/env ruby


require 'thor'
require 'malge'
require 'vasputils'
require 'pp'
require "optparse"
#require "gnuplot"

## vasprun.xml を操作する

### Command template
class VasprunXmlCommand < Thor

  DEFAULT_XML = 'vasprun.xml'
  DOS_BASENAME = 'total_dos'

  desc 'vasprunxml dos [options]', 
    'Generate DOS.'
  option :xml,  desc: "Indicate vasprun.xml file."
  option :png, :type => :boolean,  desc: "Output png image."
  option :eps, :type => :boolean,  desc: "Output eps image."
  option :dat, :type => :boolean,  desc: "Output Gnuplot style data file."
  option :fermi, :type => :boolean, desc: "Read Fermi energy and set as zero."
  option :min, desc: "Minimum energy of horizontal axis."
  option :max, desc: "Maximum energy of horizontal axis."
    ## :type => :numeric で負数を指定できなかった。[2016-02-18]
  def dos(* args)
    xml = options[:xml] || DEFAULT_XML
    vasprunxml = VaspUtils::VasprunXml.load_file( xml )

    dos_data = vasprunxml.total_dos(1)
    labels = vasprunxml.total_dos_labels

    if vasprunxml.num_spins == 2
      dos_data_down = vasprunxml.total_dos(2)
      dos_data.size.times do |i|
        dos_data_down[i].shift
        dos_data[i] += dos_data_down[i].map{|j| j * (-1.0)}
      end

      new_labels = [labels.shift]
      new_labels += labels.map{|i| i + "-up"}
      new_labels += labels.map{|i| i + "-down"}
      labels = new_labels
    end

    if options[:fermi]
      dos_data.map! do |i|
        energy = i.shift
        energy -= vasprunxml.fermi_energy
        [energy] + i
      end
    end

    write_dat(labels, dos_data ) if options[:dat]
    plot(labels, dos_data, options[:min], options[:max], :png ) if options[:png]
    plot(labels, dos_data, options[:min], options[:max], :eps ) if options[:eps]
  end

  #If ion_indices are indicated, use partial dos and generate each image.
  #If ion_indices is empty, use total dos.
  # --sum 指定ありの時、指定したイオンの総和で1つの DOS を描く。
  # --sum 指定なしの時、イオンごとに別個の DOSj を描く。
  #   pdos-ions-1..4,9..12.png
  # partial dos がだせるか。複数イオンで複数ファイルになるか。
  desc 'vasprunxml pdos [options] ion_indices', 
    'Generate Partial DOS.'
  option :xml,  desc: "Indicate vasprun.xml file."
  #arguments :arg
  #option :sum, :type => :boolean,  desc: "Sum up orbitals of multiple ions."
  def pdos(* ion_indices)
    xml = options[:xml] || DEFAULT_XML
    vasprunxml = VaspUtils::VasprunXml.load_file( xml )

    pdos_list = ion_indices.map{|i| i.to_i}.each do |i|
      vasprunxml.partial_dos(i, 1)
    end

    #if num_spins
    pp ion_indices
    #HERE
  end

  private

  def plot(labels, data, min = nil, max = nil, type)
    if type == :png
      terminal = "png enhanced font 'IPA P ゴシック' fontscale 1.2"
      outfile = DOS_BASENAME + ".png"
    end
    if type == :eps
      terminal = 'postscript eps enhanced color'
      outfile = DOS_BASENAME + ".eps"
    end

    Gnuplot.open do |gp|
      Gnuplot::Plot.new(gp) do |plot|
        #pp terminal
        plot.terminal terminal
        plot.output   outfile
        plot.title    "Total DOS"
        plot.xlabel   "Energy [eV]"
        plot.ylabel   "Density of states [states/eV]" #TODO
        plot.xrange   "[#{min.to_s}:#{max.to_s}]"
        #plot.y2range  "[:]"
        #plot.x2tics   "('' 0.0)"
        #plot.y2tics   "('' 0.0)"
        #plot.ytics   "('' 0.0)"
        #plot.grid     'linetype 0 linewidth 1 linestyle 0 noxtics x2tics noytics y2tics'
        #plot.grid     'linetype 0 linewidth 1 linestyle 0 noxtics x2tics ytics'

        #plot.xrange    '[-10:10]'
        columns = data.transpose
        1.upto(columns.size - 1) do |i|
          #pp i
          plot.data << Gnuplot::DataSet.new([columns[0], columns[i]]) do |ds|
            ds.with      = "lines"  # 点のみなら "points"
            ds.linewidth = 2
            ds.linecolor = i
            ds.title     = labels[i]
            #ds.notitle
          end
        end
      end
    end
  end

  def write_dat(labels, data)
    io = File.open(DOS_BASENAME + ".dat", "w")
    io.print '#'
    labels.each do |i|
      io.printf("%8s  ", i)
    end
    io.puts
    data.each do |items|
      io.print ' '
      items.each do |item|
        io.printf("%8.4f  ", item)
      end
      io.puts
    end
  end

end

VasprunXmlCommand.start(ARGV)
