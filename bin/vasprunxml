#! /usr/bin/env ruby


require 'thor'
require 'malge'
require 'vasputils'
require 'pp'
require "optparse"
#require "gnuplot"

## vasprun.xml を操作する

### Command template
class VasprunXmlCommand < Thor

  DEFAULT_XML = 'vasprun.xml'
  DOS_BASENAME = 'dos'
  PDOS_PREFIX = 'pdos'

  desc 'vasprunxml dos [options]', 
    'Generate total DOS.'
  option :xml,  desc: "Indicate vasprun.xml file."
  option :png, :type => :boolean,  desc: "Output png image."
  option :eps, :type => :boolean,  desc: "Output eps image."
  option :dat, :type => :boolean,  desc: "Output Gnuplot style data file."
  #option :stdout, :type => :boolean,  desc: "Output Gnuplot style data to stdout."
  option :quiet, :type => :boolean,  desc: "Not output to stdout."
  option :fermi, :type => :boolean, desc: "Read Fermi energy and set as zero."
  option :min, desc: "Minimum energy of horizontal axis."
  option :max, desc: "Maximum energy of horizontal axis."
    ## :type => :numeric で負数を指定できなかった。[2016-02-18]
  #def dos(* args)
  def dos
    @options = options
    @xml = VaspUtils::VasprunXml.load_file( @options[:xml] || DEFAULT_XML )

    dos_data1 = @xml.total_dos(1)
    dos_data2 = @xml.total_dos(2) if @xml.num_spins == 2

    ## remove integrated
    dos_data1.map!{|i| [i[0], i[1]]}
    dos_data2.map!{|i| [i[0], i[1]]} if @xml.num_spins == 2

    plot_dos(dos_data1, dos_data2, DOS_BASENAME, dos_labels)
  end

  #If ion_indices are indicated, use partial dos and generate each image.
  #If ion_indices is empty, use total dos.
  # --sum 指定ありの時、指定したイオンの総和で1つの DOS を描く。
  # --sum 指定なしの時、イオンごとに別個の DOSj を描く。
  #   pdos-ions-1..4,9..12.png
  # partial dos がだせるか。複数イオンで複数ファイルになるか。
  desc 'vasprunxml pdos [options] ion_indices', 
    'Generate Partial DOS.'
  option :xml,  desc: "Indicate vasprun.xml file."
  option :png, :type => :boolean,  desc: "Output png image."
  option :eps, :type => :boolean,  desc: "Output eps image."
  option :dat, :type => :boolean,  desc: "Output Gnuplot style data file."
  #option :stdout, :type => :boolean,  desc: "Output Gnuplot style data to stdout."
  option :quiet, :type => :boolean,  desc: "Not output to stdout."
  option :fermi, :type => :boolean, desc: "Read Fermi energy and set as zero."
  option :min, desc: "Minimum energy of horizontal axis."
  option :max, desc: "Maximum energy of horizontal axis."
  option :azimuthal, :type => :boolean, desc: "Sum for the same azimuthal orbitals."
  option :sum, :type => :boolean,  desc: "Sum up orbitals of multiple ions."
  def pdos(* ion_indices)
    @options = options
    if ion_indices.empty?
      puts "'pdos' subcommand needs at least one atom index. Exit."
      exit
    end

    @xml = VaspUtils::VasprunXml.load_file( options[:xml] || DEFAULT_XML )
    pdos1_for_ions = []
    pdos2_for_ions = []
    ion_indices.size.times do |i|
      ion_index = ion_indices[i].to_i
      tmp_pdos = @xml.partial_dos(ion_index, 1)
      tmp_pdos = sum_azimuthal(tmp_pdos) if @options[:azimuthal]
      pdos1_for_ions << tmp_pdos
      if @xml.num_spins == 2
        tmp_pdos = @xml.partial_dos(ion_index, 2)
        tmp_pdos = sum_azimuthal(tmp_pdos) if @options[:azimuthal]
        pdos2_for_ions << tmp_pdos
      end
    end

    if @options[:sum]
      ##test
      #a = [
      #  [[0,1,1],[1,2,3], [2,0,0]],
      #  [[0,2,2],[1,4,6], [2,0,0]],
      #]
      #sum_ions(a)
      ##=> [[0, 3.0, 3.0], [1, 6.0, 9.0], [2, 0.0, 0.0]]
      #
      #exit

      sum_pdos1 = sum_ions(pdos1_for_ions)
      sum_pdos2 = sum_ions(pdos2_for_ions)
      plot_dos(sum_pdos1, sum_pdos2, "#{PDOS_PREFIX}-sum", pdos_labels)
    else
      #plot not sum
      pdos1_for_ions.size.times do |i|
        plot_dos(pdos1_for_ions[i], pdos2_for_ions[i], "#{PDOS_PREFIX}-#{ion_indices[i]}", pdos_labels)
      end
    end
    #    0.0000    0.0044    0.0016    0.0000   -0.0270   -0.0103   -0.0000 
  end

  private

  def sum_ions(dos_for_ions)
    results = []
    num_energies = dos_for_ions[0].size
    num_ions = @xml.num_ions
    num_orbitals = dos_for_ions[0][0].size - 1
    num_energies.times do |e|
      # dos_for_ions[i][e][o]
      energy = dos_for_ions[0][e][0]
      orbitals = Array.new(num_orbitals).fill(0.0)
      num_ions.times do |i|
        line_items = dos_for_ions[i][e]
        line_items.shift #energy
        orbitals.size.times do |o|
          orbitals[o] += line_items[o]
        end
      end
      results << [energy] + orbitals
    end
    results
  end

  def sum_azimuthal(dos_data)
    results = dos_data.map do |os|
      s = os[1]
      p = os[2] + os[3] + os[4]
      d = os[5] + os[6] + os[7] + os[8] + os[9]
      items = [os[0], s, p, d]
      if dos_data[0].size > 10 # including f_orbital
        items << os[10] + os[11] + os[12] + os[13] + os[14]
      end
      items
    end
  end

  def plot_dos(dos_data1, dos_data2, basename, labels)
    dos_data = merge_spins(dos_data1, dos_data2) if @xml.num_spins == 2
    dos_data ||= dos_data1
    dos_data = shift_fermi(dos_data) if @options[:fermi]

    write_image(labels, dos_data, :png, basename + ".png") if @options[:png]
    write_image(labels, dos_data, :eps, basename + ".eps") if @options[:eps]
    if @options[:dat]
      io = File.open(basename + ".dat", 'w')
      write_dat(labels, dos_data, io )
    end
    unless @options[:quiet]
      io = $stdout
      write_dat(labels, dos_data, io )
    end
  end

  def shift_fermi(dos_data)
    result = dos_data.map do |i|
      energy = i.shift
      energy -= @xml.fermi_energy
      [energy] + i
    end
    result
  end

  def pdos_labels
    results = @xml.partial_dos_labels

    if @options[:azimuthal]
      new_labels = [results.shift]
      new_labels += results.map{|i| i.split('')[0]}.uniq
      results = new_labels
    end

    if @xml.num_spins == 2
      new_labels = [results.shift]
      new_labels += results.map{|i| i + "-up"}
      new_labels += results.map{|i| i + "-down"}
      results = new_labels
    end
    results
  end

  def dos_labels
    results = @xml.total_dos_labels
    results.pop ## remove integrated
    if @xml.num_spins == 2
      new_labels = [results.shift]
      new_labels += results.map{|i| i + "-up"}
      new_labels += results.map{|i| i + "-down"}
      results = new_labels
    end
    results
  end

  def merge_spins(dos1, dos2)
    results = []
    dos1.size.times do |i|
      dos2[i].shift
      results[i] = dos1[i] + dos2[i].map{|j| j * (-1.0)}
    end
    results
  end

  def write_image(labels, data, type, outfile)
    if type == :png
      terminal = "png enhanced font 'IPA P ゴシック' fontscale 1.2"
    end
    if type == :eps
      terminal = 'postscript eps enhanced color'
    end
    min = @options[:min]
    max = @options[:max]

    Gnuplot.open do |gp|
      Gnuplot::Plot.new(gp) do |plot|
        plot.terminal terminal
        plot.output   outfile
        plot.title    "Total DOS"
        plot.xlabel   "Energy [eV]"
        plot.ylabel   "Density of states [states/eV]" #TODO
        plot.xrange   "[#{min.to_s}:#{max.to_s}]"
        #plot.y2range  "[:]"
        #plot.x2tics   "('' 0.0)"
        #plot.y2tics   "('' 0.0)"
        #plot.ytics   "('' 0.0)"
        #plot.grid     'linetype 0 linewidth 1 linestyle 0 noxtics x2tics noytics y2tics'
        #plot.grid     'linetype 0 linewidth 1 linestyle 0 noxtics x2tics ytics'

        #plot.xrange    '[-10:10]'
        columns = data.transpose
        1.upto(columns.size - 1) do |i|
          plot.data << Gnuplot::DataSet.new([columns[0], columns[i]]) do |ds|
            ds.with      = "lines"  # 点のみなら "points"
            ds.linewidth = 2
            ds.linecolor = i
            ds.title     = labels[i]
          end
        end
      end
    end
  end

  def write_dat(labels, data, io)
    io.print '#'
    labels.each do |i|
      io.printf("%8s  ", i)
    end
    io.puts
    data.each do |items|
      io.print ' '
      items.each do |item|
        io.printf("%8.4f  ", item)
      end
      io.puts
    end
  end

end

VasprunXmlCommand.start(ARGV)
