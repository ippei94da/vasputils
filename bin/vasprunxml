#! /usr/bin/env ruby


require 'thor'
require 'malge'
require 'vasputils'
require 'pp'
require "optparse"
#require "gnuplot"

## vasprun.xml を操作する

### Command template
class VasprunXmlCommand < Thor

  DEFAULT_XML = 'vasprun.xml'
  DOS_BASENAME = 'dos'
  PDOS_BASENAME = 'pdos'

  desc 'vasprunxml dos [options]', 
    'Generate total DOS.'
  option :xml,  desc: "Indicate vasprun.xml file."
  option :png, :type => :boolean,  desc: "Output png image."
  option :eps, :type => :boolean,  desc: "Output eps image."
  option :dat, :type => :boolean,  desc: "Output Gnuplot style data file."
  option :fermi, :type => :boolean, desc: "Read Fermi energy and set as zero."
  option :min, desc: "Minimum energy of horizontal axis."
  option :max, desc: "Maximum energy of horizontal axis."
    ## :type => :numeric で負数を指定できなかった。[2016-02-18]
  #def dos(* args)
  def dos
    @xml = VaspUtils::VasprunXml.load_file( options[:xml] || DEFAULT_XML )

    dos_data = @xml.total_dos(1)
    dos_data = merge_spins(dos_data, @xml.total_dos(2)) if @xml.num_spins == 2
    dos_data = shift_fermi(dos_data) if options[:fermi]

    if options[:png]
      write_image(labels,
                  dos_data,
                  :png,
                  DOS_BASENAME+".png",
                  options[:min],
                  options[:max] )
    end
    if options[:eps]
      write_image(labels,
                  dos_data,
                  :eps,
                  DOS_BASENAME+".eps",
                  options[:min],
                  options[:max] )
    end
    io = $stdout
    io = File.open(DOS_BASENAME + ".dat", 'w') if options[:dat]
    write_dat(labels, dos_data, io )
  end

  #If ion_indices are indicated, use partial dos and generate each image.
  #If ion_indices is empty, use total dos.
  # --sum 指定ありの時、指定したイオンの総和で1つの DOS を描く。
  # --sum 指定なしの時、イオンごとに別個の DOSj を描く。
  #   pdos-ions-1..4,9..12.png
  # partial dos がだせるか。複数イオンで複数ファイルになるか。
  desc 'vasprunxml pdos [options] ion_indices', 
    'Generate Partial DOS.'
  option :xml,  desc: "Indicate vasprun.xml file."
  option :png, :type => :boolean,  desc: "Output png image."
  option :eps, :type => :boolean,  desc: "Output eps image."
  option :dat, :type => :boolean,  desc: "Output Gnuplot style data file."
  option :fermi, :type => :boolean, desc: "Read Fermi energy and set as zero."
  option :min, desc: "Minimum energy of horizontal axis."
  option :max, desc: "Maximum energy of horizontal axis."
  #arguments :arg
  #option :sum, :type => :boolean,  desc: "Sum up orbitals of multiple ions."
  def pdos(* ion_indices)
    if ion_indices.empty?
      puts "'pdos' subcommand needs at least one atom index. Exit."
      exit
    end

    @xml = VaspUtils::VasprunXml.load_file( options[:xml] || DEFAULT_XML )
    pdos_data = []
    ion_indices.size.times do |i|
      ion_index = ion_indices[i].to_i
      pdos_data[i] = @xml.partial_dos(ion_index, 1)
      if @xml.num_spins == 2
        pdos_data[i] = merge_spins(pdos_data[i], @xml.partial_dos(ion_index, 2))
      end
    end
    pp pdos_data[0][400]; exit
    pp pdos_data[0][400]; exit

    if options[:sum]
      #pdos_for_ions.each do |dos_data|
      #  #dos_data = まとめる
      #end
      #write_dat(labels, dos_data, PDOS_BASENAME + ".dat" ) if options[:dat]
      #write_image(labels, dos_data, :png, options[:min], options[:max] ) if options[:png]
      #write_image(labels, dos_data, :eps, options[:min], options[:max] ) if options[:eps]
    else
      pdos_for_ions.each do |dos_data|
        #pp dos_data
        dos_data = merge_spins(dos_data, @xml.total_dos(2)) if @xml.num_spins == 2
        dos_data = shift_fermi(dos_data) if options[:fermi]

        io = File.open(PDOS_BASENAME + ".dat" , 'w')
        write_dat(labels, dos_data, ) if options[:dat]
        if options[:png]
          write_image(labels, dos_data, :png, PDOS_BASENAME+".png", options[:min], options[:max] )
        end
        if options[:eps]
          write_image(labels, dos_data, :eps, PDOS_BASENAME+".eps", options[:min], options[:max] )
        end
      end
    end


    ##if num_spins
    #pp ion_indices
    ##HERE
  end

  private

  def shift_fermi(dos_data)
    result = dos_data.map do |i|
      energy = i.shift
      energy -= @xml.fermi_energy
      [energy] + i
    end
    result
  end

  def labels
    results = @xml.total_dos_labels
    if @xml.num_spins == 2
      new_labels = [results.shift]
      new_labels += results.map{|i| i + "-up"}
      new_labels += results.map{|i| i + "-down"}
      results = new_labels
    end
    results
  end

  def merge_spins(dos1, dos2)
    results = []
    dos1.size.times do |i|
      dos2[i].shift
      results[i] = dos1[i] + dos2[i].map{|j| j * (-1.0)}
    end
    results
  end

  def write_image(labels, data, type, outfile, min = nil, max = nil)
    if type == :png
      terminal = "png enhanced font 'IPA P ゴシック' fontscale 1.2"
    end
    if type == :eps
      terminal = 'postscript eps enhanced color'
    end

    Gnuplot.open do |gp|
      Gnuplot::Plot.new(gp) do |plot|
        plot.terminal terminal
        plot.output   outfile
        plot.title    "Total DOS"
        plot.xlabel   "Energy [eV]"
        plot.ylabel   "Density of states [states/eV]" #TODO
        plot.xrange   "[#{min.to_s}:#{max.to_s}]"
        #plot.y2range  "[:]"
        #plot.x2tics   "('' 0.0)"
        #plot.y2tics   "('' 0.0)"
        #plot.ytics   "('' 0.0)"
        #plot.grid     'linetype 0 linewidth 1 linestyle 0 noxtics x2tics noytics y2tics'
        #plot.grid     'linetype 0 linewidth 1 linestyle 0 noxtics x2tics ytics'

        #plot.xrange    '[-10:10]'
        columns = data.transpose
        1.upto(columns.size - 1) do |i|
          plot.data << Gnuplot::DataSet.new([columns[0], columns[i]]) do |ds|
            ds.with      = "lines"  # 点のみなら "points"
            ds.linewidth = 2
            ds.linecolor = i
            ds.title     = labels[i]
          end
        end
      end
    end
  end

  def write_dat(labels, data, io)
    io.print '#'
    labels.each do |i|
      io.printf("%8s  ", i)
    end
    io.puts
    data.each do |items|
      io.print ' '
      items.each do |item|
        io.printf("%8.4f  ", item)
      end
      io.puts
    end
  end

end

VasprunXmlCommand.start(ARGV)
