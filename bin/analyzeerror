#! /usr/bin/env ruby
# coding: utf-8

require "pp"
require "find"
require "rubygems"
require "vasputils"

require "optparse"
## option analysis
OPTIONS = {:symprec => 1.0E-5, :angle => -1.0}
CONDITIONS = {}
op = OptionParser.new
op.on("-s val"      , "--symprec=val"        , "Precision to find symmetry. Default: 1.0E-5." ){|val| OPTIONS[:symprec] = val.to_f}
op.on("-a val"      , "--angle-tolerance=val"        , "Angle tolerance to find symmetry. Default: -1.0" ){|val| OPTIONS[:angle] = val.to_f}

op.on(""        , "--ka=val"    , "Mesh number of k_a axis."                            ){ |val| CONDITIONS[:ka]     = val.to_i}
op.on(""        , "--kb=val"    , "Mesh number of k_b axis."                            ){ |val| CONDITIONS[:kb]     = val.to_i}
op.on(""        , "--kc=val"    , "Mesh number of k_c axis."                            ){ |val| CONDITIONS[:kc]     = val.to_i}
op.on(""        , "--kab=val" , "Mesh number of k_a and k_b axis."          ){ |val| CONDITIONS[:kab]    = val.to_i}
op.on(""        , "--kbc=val" , "Mesh number of k_b and k_c axis."          ){ |val| CONDITIONS[:kbc]    = val.to_i}
op.on(""        , "--kca=val" , "Mesh number of k_c and k_a axis."          ){ |val| CONDITIONS[:kca]    = val.to_i}
op.on(""        , "--kabc=val", "Mesh number of k_a, k_b, and k_c axis."){ |val| CONDITIONS[:kabc] = val.to_i}

op.on(""        , "--encut=val", "ENCUT, cutoff energy."                                ){ |val| CONDITIONS[:encut]= val.to_i}

op.parse!(ARGV)

unless ARGV.size == 0
    puts "NOTE: need check coefficients. Option help, calculation, output."
    puts "USAGE: This script analyze subdirs of current dir; not use argument."
    puts "Exit."
    exit
end

dir = ENV['PWD']
holder = VaspUtils::ConditionAnalyzer::Holder.load_dir(dir, OPTIONS[:symprec], OPTIONS[:angle])

def show(data)
    #Indices
    data[0].keys.each do |key|
        printf("    %14s", key.to_s)
    end
    puts
    sort_key = data[0].keys[0]
    data.sort_by {|hash| hash[sort_key] }.each do |hash|
        hash.each do |key, val|
            printf("    %14.6f", val)
        end
        puts
    end
    puts
end

############################################################
puts "All converged data."
show(holder.conds_results)

############################################################
hold_conds = holder.conds_results[0].keys - [:toten]
unless hold_conds == CONDITIONS.keys
    puts "Conditions mismatch."
    puts "  Calculations: #{(hold_conds - [:toten]).to_s} + :toten"
    puts "  Options         : #{CONDITIONS.keys.to_s}"
    puts "Exit."
    exit
end

############################################################
CONDITIONS.each do |key, val|
    fixed_conds = CONDITIONS - {key => val}
    puts "Analysis: Fixed #{fixed_conds}, along :#{key}"
    data = holder.project(fixed_conds)
    begin
        function = VaspUtils::ConditionAnalyzer::ErrorFitter.fit(data)
        puts "  Fitting result: #{function.equation}"
        data.each do |hash|
            abs_diff_last = (hash[:toten] - function.most_strict_pair[1]).abs

            key = (hash.keys - [:toten])[0]
            x = hash[key]

            hash[:abs_diff_last] = abs_diff_last
            hash[:expected_error]    = function.expected_error(x)
        end
        show(data)
    rescue VaspUtils::ConditionAnalyzer::ErrorFitter::UnableCalculationError
        show(data)
        puts "  Error fitted function cannot be generated."
        puts "  Maybe less data points or include zero for exponential."
        puts
    end
end
