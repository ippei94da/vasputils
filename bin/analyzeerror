#! /usr/bin/env ruby
# coding: utf-8

require "pp"
require "find"
require "rubygems"
require "vasputils"

require "optparse"
## option analysis
OPTIONS = {}
op = OptionParser.new
op.on(""    , "--kpoints"    , "Kpoints fitting to E_tot =  a_0 + a_1 n_k"              ){ OPTIONS[:kpoints]    = true}
op.on(""    , "--encut-inv1" , "Encut   fitting to |E_tot - a_0| = a_1/E_cut."          ){ OPTIONS[:encutinv1]  = true}
op.on(""    , "--encut-inv32", "Encut   fitting to |E_tot - a_0| = a_1/E_cut^(3/2)."    ){ OPTIONS[:encutinv32] = true}
op.on(""    , "--encut-exp1" , "Encut   fitting to |E_tot - a_0| = a_1 exp a_2 x."      ){ OPTIONS[:encutexp1]  = true}
op.on(""    , "--encut-exp32", "Encut   fitting to |E_tot - a_0| = a_1 exp a_2 x^(3/2)."){ OPTIONS[:encutexp32] = true}
op.on("-a"  , "--all"        , "All analysis."                                          ){
  OPTIONS[:kpoints]    = true
  OPTIONS[:encutinv1]  = true
  OPTIONS[:encutinv32] = true
  OPTIONS[:encutexp1]  = true
  OPTIONS[:encutexp32] = true
}
op.parse!(ARGV)

unless ARGV.size == 0
  puts "NOTE: need check coefficients. Option help, calculation, output."
  puts "USAGE: This script analyze subdirs of current dir; not use argument."
  puts "Exit."
  exit
end

dir = ENV['PWD']
analyzer = VaspUtils::ErrorAnalyzer.new(dir)
#ea.analyze_kpoint(eac)    
#ea.analyze_encutinv1(eac) 
#ea.analyze_encutinv32(eac)
#ea.analyze_encutexp1(eac) 
#ea.analyze_encutexp32(eac)


#dirs = analyzerc.converged_dirs
#if dirs.size == 0
#  puts "No converged directory under current directory."
#  puts "Change the directory which aggregates calculations"
#  puts "on the same crystal using various conditions."
#  puts "Exit."
#  exit
#end

def show_converged_totens(analyzer)
  puts "All converged data:"
  analyzer.converged_calculations.each do |calc|
    printf("  k-mesh = [%2d, %2d, %2d], ENCUT = %7.1f, TOTEN = %10.5f\n",
      *calc[:kmesh], calc[:encut], calc[:toten])
  end
  puts
end

#def show_analysis(fitter)
#  coefficients = fitter.fit
#  printf("    a_0 = %10.4f, a_1 = %10.4f\n", *coefficients)
#  puts "    Expected errors:"
#  fitter.expected_errors.each do |pair|
#    printf("      %15s, %10.5f\n",  pair[0].to_s, pair[1])
#  end
#  #pp fitter
#end

#Show:
# - Assumed function; e.g., "Fitting to |E_t - a_0| = a_1 / n_k"
# - Coefficients; e.g., [1.0, -2.0]
# - Variance; summed square values of difference between raw_data and expected_error.
# - Data of [condition, raw_data, absolute_error, expected_error]
def show_analysis_kpoint(analyzer)
  puts "Fitting to |E_t - E_last| = a_1 / n_k"
  analyzer.encuts.each do |encut|
    printf( "  Fixed ENCUT of %4d:", encut)
    #analyzer.fit_kpoints_totens(encut)

    begin
      function = analyzer.fit_kpoints_totens(encut)
    rescue VaspUtils::ErrorAnalyzer::UnsufficientDataError
      puts " cannot fit."
      next
    end
    puts "must change to a_0 == 0"
    TODO 
    printf("    a_0 = %10.4f, a_1 = %10.4f\n", * function.coefficients)
    puts "    Variance using expected error: #{function.variance}"
    puts "    Expected errors:"

    printf("      %15s, %10s, %10s, %10s\n", "n_k", "raw_data", "abs_err", "exp_err")
    function.raw_pairs.each_with_index do |pair, index|
      n_k = pair[0]
      raw = pair[1]
      if function.diff_abs_pairs[index]
        abs_err = function.diff_abs_pairs[index][1]
      else
        abs_err = 0.0
      end
      exp_err = function.expected_error(n_k)
      printf("      %15s, %10.5f, %10.5f, %10.5f\n", n_k, raw, abs_err, exp_err)
    end
    puts
  end
  puts
end

#def show_analysis_encutinv1(analyzer)
#  puts "Fitting to |E_t - a_0| = a_1 / E_c"
#  analyzer.kmeshes.each do |kmesh|
#    printf( "  Fixed k-mesh of [%2d, %2d, %2d]:", *kmesh)
#    data_pairs = analyzer.encut_toten_pairs_of_kmesh(kmesh)
#    if data_pairs.size < 2
#      puts " data_pairs is #{data_pairs.size}: cannot fit."
#      next
#    end
#    etf = VaspUtils::ErrorAnalyzer::EncutTotenFitter1.new(data_pairs)
#    show_analysis(etf)
#  end
#  puts
#end
#
#def show_analysis_encutinv32(analyzer)
#  puts "Fitting to |E_t - a_0| = a_1 / E_c^{3/2}"
#  analyzer.kmeshes.each do |kmesh|
#    printf( "  Fixed k-mesh of [%2d, %2d, %2d]:", *kmesh)
#    data_pairs = analyzer.encut_toten_pairs_of_kmesh(kmesh)
#    if data_pairs.size < 2
#      puts " data_pairs is #{data_pairs.size}: cannot fit."
#      next
#    end
#    etf = VaspUtils::ErrorAnalyzer::EncutTotenFitter32.new(data_pairs)
#    show_analysis(etf)
#  end
#  puts
#end
#
#def show_analysis_encutexp1(analyzer)
#  puts "Fitting to |E_t - E_last| = a e^{bx}"
#  analyzer.kmeshes.each do |kmesh|
#    printf( "  Fixed k-mesh of [%2d, %2d, %2d]:", *kmesh)
#    data_pairs = analyzer.encut_toten_pairs_of_kmesh(kmesh)
#    if data_pairs.size < 2
#      puts " data_pairs is #{data_pairs.size}: cannot fit."
#      next
#    end
#    etf = VaspUtils::ErrorAnalyzer::EncutTotenFitterExp1.new(data_pairs)
#    show_analysis(etf)
#  end
#  puts
#end
#
#def show_analysis_encutexp32(analyzer)
#  puts "Fitting to |E_t - E_last| = a e^{bx^(3/2)}"
#  analyzer.kmeshes.each do |kmesh|
#    printf( "  Fixed k-mesh of [%2d, %2d, %2d]:", *kmesh)
#    data_pairs = analyzer.encut_toten_pairs_of_kmesh(kmesh)
#    if data_pairs.size < 2
#      puts " data_pairs is #{data_pairs.size}: cannot fit."
#      next
#    end
#    etf = VaspUtils::ErrorAnalyzer::EncutTotenFitterExp32.new(data_pairs)
#    show_analysis(etf)
#  end
#  puts
#end

show_converged_totens(analyzer)
show_analysis_kpoint(analyzer)      if OPTIONS[:kpoints]
show_analysis_encutinv1(analyzer)   if OPTIONS[:encutinv1]
show_analysis_encutinv32(analyzer)  if OPTIONS[:encutinv32]
show_analysis_encutexp1(analyzer)   if OPTIONS[:encutexp1]
show_analysis_encutexp32(analyzer)  if OPTIONS[:encutexp32]

